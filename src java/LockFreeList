public class LockFreeLisst {
    private Node head;
    private Lock lock = new ReetrantLock();
    
    public LockFreeLisst() {
        head = new Node(Integer.MIN_VALUE);
        head.next = new Node(Integer.MAX_VALUE);
    }

    private boolean validate(Node pred, Node curr) {
        return !pred.marked && !curr.marked && pred.next == curr;
    }

    public boolean add(T item) {
        int key = item.hashCode();
        while(true) {
            Node pred = head;
            Node curr = head.next;
            while (curr.key < key) {
                pred = curr; curr = curr.next;
            }
            pred.lock();
            try {
                curr.lock();
                try {
                    if (validate(pred, curr)) {
                        if (curr.key == key) {
                            return false;
                        } else {
                            Node node = new Node(item);
                            node.next = curr;
                            pred.next = node;
                            return true;
                        }
                    }
                } finally {
                    curr.unlock();
                }
            } finally {
                pred.unlock();
            }
        }

        public boolean remove(T item) {
            int key = item.hashCode();
            while (true) {
                Node pred = head;
                Node curr = head.next;
                while (curr.key < key) {
                    pred = curr; curr = curr.next;
                }
                pred.lock();
                try {
                    curr.lock();
                    try {
                        if (validate(pred, curr)) {
                            if (curr.key != key) {
                                return false;
                            } else {
                                curr.marked = true;
                                pred.next = curr.next;
                                return true;
                            }
                        }
                    } finally {
                        curr.unlock();
                    }
                } finally {
                    pred.unlock();
                }
            }
        }

        public boolean contains(T item) {
            int key = item.hashCode();
            Node curr = head;
            while (curr.key < key) curr = curr.next;
            return curr.key == key && !curr.marked;
        }
}

public interface Set<T> {
    boolean add(T x);
    boolean remove(T x);
    boolean contains(T x);
}

private class Node {
    T item;
    int key;
    Node next;
}